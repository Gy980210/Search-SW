#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <io.h>

typedef struct _Print
{
	char filename[256];
	int count;
	char *str_location;
}print;

int getFileSize(FILE *fp)
{
	int size;
	long currPos = ftell(fp);

	fseek(fp, 0, SEEK_END);
	size = (int)ftell(fp);

	fseek(fp, currPos, SEEK_SET);

	return size;
}

void strcut(char *H)
{
	int i = 0;
	while (H[i])
	{
		i++;
	}
	while (H[i] != '\\')
	{
		i--;
	}
	H[i + 1] = '\0';
}

int compare_with_size(const void *a, const void  *b)
{
	print *ptr_a = (print*)a;
	print *ptr_b = (print*)b;

	if (ptr_a->count < ptr_b->count) return 1;
	else if (ptr_a->count == ptr_b->count) return 0;
	else return -1;
}

int *KMP_pmt(char *wanted, int wlen)
{
	int *pmt = NULL;
	int i;
	int k;

	if (NULL == wanted || 0 >= wlen) return NULL;

	pmt = (int *)malloc(sizeof(int) * wlen);
	if (NULL == pmt) return NULL;

	for (i = 1, k = 0, pmt[0] = 0; i < wlen; i++) {
		while (k > 0 && wanted[i] != wanted[k]) {
			k = pmt[k - 1];
		}

		if (wanted[i] == wanted[k]) {
			k++;
		}
		pmt[i] = k;
	}

	return pmt;
}

char *KMP(char *s, int slen, char *wanted, int wlen)
{
	int *pmt = NULL;
	int i = 0;
	int j = 0;

	if (NULL == s || NULL == wanted || 0 >= wlen || slen < wlen) return NULL;
	if (s == wanted) return (char *)s;

	pmt = KMP_pmt(wanted, wlen);
	if (NULL == pmt) return NULL;

	while (i < slen && j < wlen) {
		if (s[i] == wanted[j]) {
			i++;
			j++;
		}
		else {
			if (0 == j) {
				i++;
			}
			else {
				j = pmt[j - 1];
			}
		}
	}

	free(pmt);

	return j == wlen ? (char *)(s + i - wlen) : NULL;
}

int main()
{
	char *str = (char *)malloc(100);
	char *buffer;
	char *a;
	char *str_ptr;
	char *directory = (char *)malloc(100);
	int count, check = 0, i = 0, j = 0;
	int size;
	char YN = 'Y';

	_finddatai64_t c_file;
	intptr_t hFile;
	print *r = (print *)calloc(1, sizeof(print));

	printf("Input a folder directory which contains files : ");
	scanf("%[^\n]s", directory);

	printf("Input a word you want to find : ");
	scanf(" %[^\n]s", str);
	getchar();

	strcat(directory, "\\*.txt");

	if ((hFile = _findfirsti64(directory, &c_file)) == -1L)
	{
		switch (errno) 
		{
		case ENOENT:
			printf(":: No text file in such directory ::\n"); break;
		case EINVAL:
			fprintf(stderr, "Invalid path name.\n"); exit(1); break;
		case ENOMEM:
			fprintf(stderr, "Not enough memory or file name too long.\n"); exit(1); break;
		default:
			fprintf(stderr, "Unknown error.\n"); exit(1); break;
		}
	}
	else 
	{
		strcut(directory);
		do 
		{
			count = 0;
			strcat(directory, c_file.name);
			
			FILE *fp = fopen(directory, "rt");
			if (fp == NULL)
				return -1;

			size = getFileSize(fp);
			buffer = (char *)calloc(1, (size_t)size + 1);
			a = (char *)calloc(1, (size_t)size + 1);

			while (!feof(fp))
			{
				a = fgets(a, size, fp);
				if (a == NULL)	break;
				strcat(buffer, a);
			}

			str_ptr = KMP(buffer, strlen(buffer), str, strlen(str));
			if (str_ptr == NULL) check += 1;
			
			while (str_ptr != NULL)               
			{
				count += 1;
				str_ptr = KMP(str_ptr + 1, strlen(str_ptr + 1), str, strlen(str));
			}
			
			r = (print *)realloc(r, (i + 1) * sizeof(print));
			strcpy(r[i].filename, c_file.name);
			r[i].count = count;
			strcut(directory);
			i++;

			fclose(fp);
			free(buffer);
			free(a);

		} while (_findnexti64(hFile, &c_file) == 0);

		if (check == i)
		{
			printf(":: No result in such directory.\n");
		}
		else
		{
			qsort(r, i, sizeof(print), compare_with_size);
			printf("File name                      |  Count  | Preview\n");
			for (j = 0; j < i; j++)
			{
				if (r[j].count == 0) continue;
				printf("%-30s |%8dë²ˆ| ...%s...\n", r[j].filename, r[j].count);
			}
		}
		_findclose(hFile);
		free(r);
		free(str);
		free(directory);
	}
	system("pause");
	return 0;
}
