//폴더 위치와 파일명에 한글이 포함되면 안 된다.
#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <io.h>

int main()
{
	char *find_str = (char *)malloc(200);
	char *buffer;
	char *str_ptr;
	char *file_directory = (char *)malloc(200);
	int count;
	
	_finddatai64_t c_file;
	intptr_t hFile;
	
	scanf(" %s %s", file_directory, find_str);	
	strcat(file_directory, "\\*.txt");

	if ((hFile = _findfirsti64(file_directory, &c_file)) == -1L)
	{
		switch (errno) 
		{
		case ENOENT:
			printf(":: No such file ::\n"); break;
		case EINVAL:
			fprintf(stderr, "Invalid path name.\n"); exit(1); break;
		case ENOMEM:
			fprintf(stderr, "Not enough memory or file name too long.\n"); exit(1); break;
		default:
			fprintf(stderr, "Unknown error.\n"); exit(1); break;
		}
	}
	else 
	{
		file_directory = strtok(file_directory, "*.txt");

		do 
		{
			count = 0;
			strcat(file_directory, c_file.name);
			
			FILE *fp = fopen(file_directory, "rt");
			if (fp == NULL)
				return 1;

			buffer = (char *)malloc(300);
			memset(buffer, 0, file_size + 1);

			fgets(buffer, file_size, fp);    

			str_ptr = strstr(buffer, find_str);   
			if (str_ptr == NULL)
			{
				printf("No string in the file.\n");
				return 0;
			}

			while (str_ptr != NULL)           
			{
				count += 1;
				str_ptr = strstr(str_ptr + 1, find_str);  
			}

			printf("%s %d번\n", c_file.name, count);
			fclose(fp);
			free(buffer);
			file_directory = strtok(file_directory, c_file.name);
		} while (_findnexti64(hFile, &c_file) == 0);
		_findclose(hFile);
		free(find_str);
	}
	return 0;
}
